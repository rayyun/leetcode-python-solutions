# https://leetcode.com/problems/find-peak-element/

# Solution 1 - Linear Scan 1
# O(n) / O(1)
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        peak = nums[0]
        peak_index = 0

        for i in range(1, len(nums) - 1):
            if nums[i - 1] < nums[i] and nums[i] > nums[i + 1]:
                if nums[i] > peak:
                    peak = nums[i]
                    peak_index = i
        
        if nums[-1] > peak:
            return len(nums) - 1
        
        return peak_index



# Solution 2 - Linear Scan 2
# O(n) / O(1)
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        peak_value = nums[0]
        peak_index = 0

        for idx, num in enumerate(nums):
            if num > peak_value:
                peak_value = num
                peak_index = idx
        
        return peak_index



# Solution 3 - Binary Search
# O(log n) / O(1)
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        left, right = 0, len(nums) - 1

        while left < right:
            mid = left + (right - left) // 2

            if nums[mid] > nums[mid + 1]:
                right = mid
            else:
                left = mid + 1

        return left
