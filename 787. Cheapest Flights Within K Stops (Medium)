# https://leetcode.com/problems/cheapest-flights-within-k-stops/description/

# O(V + E * K) / O(V + E)
from collections import deque

class Solution:
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, k: int) -> int:
        neighbors = [[] for _ in range(n)]
        for from_city, to_city, price in flights:
            neighbors[from_city].append((to_city, price))

        queue = deque([(src, 0)])
        minCost = [float('inf') for _ in range(n)]
        stops = 0

        while queue and stops <= k:
            level = len(queue)

            for i in range(level):
                city, cost = queue.popleft()

                for neighbor, price in neighbors[city]:
                    if cost + price < minCost[neighbor]:
                        minCost[neighbor] = cost + price
                        queue.append((neighbor, minCost[neighbor]))
            
            stops += 1
        
        return -1 if minCost[dst] == float('inf') else minCost[dst]
