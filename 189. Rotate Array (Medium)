# https://leetcode.com/problems/rotate-array/

# Solution 1 - new array
# O(n) / O(n)
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        N = len(nums)
        res = [0] * N
        
        for i, num in enumerate(nums):
            res[(i + k) % N] = num
            
        nums[:] = res
        


# Solution 2 - slicing
# O(n) / O(n)
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        k %= len(nums)
        
        nums[:] = nums[len(nums)-k:] + nums[:len(nums)-k]
 
 
        
# Solution 3 - reverse        
# O(n) / O(1)
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        def reverse(l, r):
            while l < r:
                nums[l], nums[r] = nums[r], nums[l]
                l += 1
                r -= 1
        
        k %= len(nums)
        reverse(0, len(nums) - k - 1)
        reverse(len(nums) - k, len(nums) - 1)
        reverse(0, len(nums) - 1)
