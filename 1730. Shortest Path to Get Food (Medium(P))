# https://leetcode.com/problems/shortest-path-to-get-food/

# O(N * M) / O(N * M)
from collections import deque

class Solution:
    def getFood(self, grid: List[List[str]]) -> int:
        R, C = len(grid), len(grid[0])
        queue = deque([])
        dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        visited = set()

        for r in range(R):
            for c in range(C):
                if grid[r][c] == '*':
                    queue.append([(r, c), 0])
                    visited.add((r, c))
                    break


        while queue:
            (r, c), path = queue.popleft()

            for x, y in dirs:
                nr, nc = r + x, c + y

                if 0 <= nr < R and 0 <= nc < C and grid[nr][nc] != 'X' and (nr, nc) not in visited:
                    if grid[nr][nc] == '#':
                        return path + 1
                    else:
                        queue.append([[nr, nc], path + 1])
                        visited.add((nr, nc))

        return -1
