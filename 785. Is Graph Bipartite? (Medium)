# https://leetcode.com/problems/is-graph-bipartite/

# Solution 1 - Union Find
class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        def find(x):
            if root[x] != x:
                root[x] = find(root[x])
            
            return root[x]
        
        def union(x, y):
            rootX = find(x)
            rootY = find(y)

            if rootX != rootY:
                root[rootY] = rootX

        def connected(x, y):
            return find(x) == find(y)

        root = [i for i in range(len(graph))]

        for u in range(len(graph)):
            for v in range(len(graph[u])):
                if connected(u, graph[u][v]):
                    return False
                
                union(graph[u][0], graph[u][v])
        
        return True



# Solution 2 - DFS
# 2 color : 1 / -1
class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        color = dict()

        for node in range(len(graph)):
            if node not in color:
                stack = [node]
                color[node] = 1

                while stack:
                    node = stack.pop()

                    for neighbor in graph[node]:
                        if neighbor not in color:
                            stack.append(neighbor)
                            color[neighbor] = color[node] * -1
                        elif color[neighbor] == color[node]:
                            return False
        
        return True
