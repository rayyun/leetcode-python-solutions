# https://leetcode.com/problems/k-closest-points-to-origin/

# Solution 1 - Heap
# O(n log k) / O(k)
import heapq

class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        heap = []

        for x, y in points:
            heapq.heappush(heap, (-1 * (x*x + y*y), x, y))
            
            if len(heap) > k:
                heapq.heappop(heap)
                
        return [(x, y) for _, x, y in heap]



# Solution 2 - Sorting
# O(n log n) / O(1)
class Solution:
    def kClosest(self, points: List[List[int]], k: int) -> List[List[int]]:
        points.sort(key=lambda x: x[0]*x[0] + x[1]*x[1])
        
        return points[:k]
