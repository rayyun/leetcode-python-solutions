# https://leetcode.com/problems/top-k-frequent-words/

# Solution 1 - Brute Force - Counter & Sort
# O(n log n) / O(n)
from collections import Counter

class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_counter = Counter(words)

        return sorted(word_counter, key=lambda x: (-word_counter[x], x))[:k]    


        
# Solution 2 - Max Heap
# O(n + k log n) / O(n)
from collections import Counter
import heapq

class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_counter = Counter(words)
        heap = [(-count, word) for word, count in word_counter.items()]
        heapq.heapify(heap)

        return [heapq.heappop(heap)[1] for _ in range(k)]



# Solution 3 - Min Heap 
# O(n log k) / O(n)
from collections import Counter
from heapq import heapify, heappush, heappop

class Item:
    def __init__(self, count, word):
        self.count = count
        self.word = word

    def __lt__(self, other):
        return self.count < other.count or (self.count == other.count and self.word > other.word)


class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_counter = Counter(words)
        heap = []

        for word, count in word_counter.items():
            heappush(heap, Item(count, word))
            if len(heap) > k:
                heappop(heap)

        return [heappop(heap).word for _ in range(k)][::-1]
