# https://leetcode.com/problems/top-k-frequent-words/

# Solution 1 - Sort
# O(n log n) / O(n)
from collections import Counter

class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_counter = Counter(words)
        
        return sorted(word_counter, key=lambda x: (-word_counter[x], x))[:k]
        
        
# Solution 2 - Heap
# O(k log n) / O(n)
from collections import Counter
import heapq

class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_counter = Counter(words)
        
        heap = [(-count, word) for word, count in word_counter.items()]
        heapq.heapify(heap)
        
        return [heapq.heappop(heap)[1] for _ in range(k)]
