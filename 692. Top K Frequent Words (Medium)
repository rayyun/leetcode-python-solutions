# https://leetcode.com/problems/top-k-frequent-words/

# Solution 1 - Sort
# O(n log n) / O(n)
from collections import Counter

class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_counter = Counter(words)
        
        return sorted(word_counter, key=lambda x: (-word_counter[x], x))[:k]
        
        
# Solution 2 - Heap
# O(n log n) / O(n)
from collections import Counter
import heapq

class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_counter = Counter(words)
        
        heap = [(-count, word) for word, count in word_counter.items()]
        heapq.heapify(heap)
        
        return [heapq.heappop(heap)[1] for _ in range(k)]



# Solution 3 - Heap (O(n log k))
# O(n log k) / O(n)
from heapq import heapify, heappush, heappop, heappushpop
from collections import defaultdict

class Item:
    def __init__(self, word, freq):
        self.word = word
        self.freq = freq
        
    def __lt__(self, other):
        if self.freq == other.freq:
            return self.word > other.word
        
        return self.freq < other.freq
        

class Solution:    
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        word_freq = defaultdict(lambda:0)       
        min_heap = []
        
        for word in words:
            word_freq[word] += 1            
        
        for word, freq in word_freq.items():
            item = Item(word, freq)
            
            if len(min_heap) < k:
                heappush(min_heap, item)
            elif item > min_heap[0]:
                heappushpop(min_heap, item)
                
        res = []
        while min_heap:
            res.append(heappop(min_heap).word)
            
        return res[::-1]
