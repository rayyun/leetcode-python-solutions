# https://leetcode.com/problems/find-the-duplicate-number

# Solution 1 - Set
# O(n) / O(n)
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        seen = set()

        for num in nums:
            if num in seen:
                return num
            else:
                seen.add(num)
                
                
                
# Solution 2 - Array as HashMap (Iterative)
# O(n) / O(1)
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        while nums[0] != nums[nums[0]]:
            # print(f"nums[0] : {nums[0]}, nums[{nums[0]}] : {nums[nums[0]]}")
            nums[nums[0]], nums[0] = nums[0], nums[nums[0]]
        return nums[0]
        
    
    
# Solution 3 - Negative Marking
# O(n) / O(1)
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        for num in nums:
            cur_num = abs(num)
            if nums[cur_num] < 0:
                duplicate = cur_num
                break
            
            nums[cur_num] *= -1
        
        for i in range(len(nums)):
            nums[i] = abs(nums[i])

        return duplicate
        
    
    
# Solution 4 - Floyd's Tortoise and Hare (Cycle Detection)
# O(n) / O(1)
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        fast = slow = nums[0]

        while True:
            slow = nums[slow]
            fast = nums[nums[fast]]

            if slow == fast:
                break

        slow = nums[0]
        while slow != fast:
            slow = nums[slow]
            fast = nums[fast]

        return fast
