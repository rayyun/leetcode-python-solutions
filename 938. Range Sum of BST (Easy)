# https://leetcode.com/problems/range-sum-of-bst/

# Solution 1 - Recursion (1)
# O(n) / O(n)
class Solution:
    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        def dfs(node):
            if not node:
                return
            
            if low <= node.val <= high:
                self.rangeSum += node.val
            
            if low < node.val:
                dfs(node.left)
                
            if node.val < high:
                dfs(node.right)
                
        self.rangeSum = 0
        dfs(root)
        
        return self.rangeSum



# Solution 2 - Recursion (2)
# O(n) / O(n)
class Solution:
    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        def dfs(node):
            if not node:
                return 0

            if node.val < low:
                return dfs(node.right)
            elif node.val > high:
                return dfs(node.left)
            else:
                return node.val + dfs(node.left) + dfs(node.right)
        
        return dfs(root)


        
# Solution 3 - Iterative
# O(n) / O(n)
class Solution:
    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        if not root:
            return 0
        
        stack = [root]
        rangeSum = 0
        
        while stack:
            node = stack.pop()
            
            if node:
                if low <= node.val <= high:
                    rangeSum += node.val
                
                if low < node.val:
                    stack.append(node.left)

                if node.val < high:
                    stack.append(node.right)

        return rangeSum
