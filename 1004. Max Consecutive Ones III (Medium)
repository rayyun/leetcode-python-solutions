# https://leetcode.com/problems/max-consecutive-ones-iii/

# Solution 1 - Sliding Window
# O(n) / O(1)
class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        left = 0
        res = 0

        for right in range(len(nums)):
            if nums[right] == 0:
                k -= 1

            while k < 0:
                if nums[left] == 0:
                    k += 1
                left += 1
            
            res = max(res, right - left + 1)

        return res



# Solution 2 - Sliding Window (more efficient)
# O(n) / O(1)
class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        left = 0

        for right in range(len(nums)):
            if nums[right] == 0:
                k -= 1
            
            if k < 0:
                if nums[left] == 0:
                    k += 1
                
                left += 1
            
        return right - left + 1



# Solution 3 - Sliding Window
# O(n) / O(1)
class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        num_cnt = [0] * 2
        left, res = 0, 0

        for right in range(len(nums)):
            num_cnt[nums[right]] += 1

            while num_cnt[0] > k:
                num_cnt[nums[left]] -= 1
                left += 1
            
            res = max(res, right - left + 1)
            
        return res



# Solution 4 - Sliding Window with deque
# O(n) / O(n)
from collections import deque

class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        zeros = deque([])
        left = 0
        res = 0
        
        for right in range(len(nums)):
            if nums[right] == 0:
                if k == 0:
                    left = right + 1
                    continue
                elif len(zeros) == k:
                    left = zeros.popleft() + 1
                    
                zeros.append(right)
            
            res = max(res, right - left + 1)
            
        return res
