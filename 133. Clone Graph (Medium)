# https://leetcode.com/problems/clone-graph/description/

# Solution 1 - BFS (Iterative)
# O(E+V) / O(V)
from collections import deque

from typing import Optional
class Solution:
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        if not node:
            return None

        visited = {}

        clone = Node(node.val, [])
        visited[node] = clone

        queue = deque([node])

        while queue:
            curr_node = queue.popleft()

            for neighbor in curr_node.neighbors:
                if neighbor not in visited:
                    visited[neighbor] = Node(neighbor.val, [])
                    queue.append(neighbor)

                visited[curr_node].neighbors.append(visited[neighbor])

        return clone

    

# Solution 2 - DFS (Recursion)
# O(E+V) / O(V)
from typing import Optional
class Solution:
    def __init__(self):
        self.visited = {}

    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        if not node:
            return None

        if node in self.visited:
            return self.visited[node]

        clone_node = Node(node.val, [])
        self.visited[node] = clone_node
 
        if node.neighbors:
            clone_node.neighbors = [self.cloneGraph(neighbor) for neighbor in node.neighbors]

        return clone_node
