# https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/

# Solution 1 - Union Find (compression path and union by rank)
# O(E⋅α(n)) / O(V)
class Solution:
    def countComponents(self, n: int, edges: List[List[int]]) -> int:
        def find(x):
            if x == root[x]:
                return x
            
            root[x] = find(root[x])            
            return root[x]
            
        def union(x, y):
            rootX = find(x)
            rootY = find(y)
            nonlocal count
            
            if rootX != rootY:
                if rank[rootX] > rank[rootY]:
                    root[rootY] = rootX
                elif rank[rootX] < rank[rootY]:
                    root[rootX] = rootY
                else:
                    root[rootY] = rootX
                    rank[rootX] += 1
                
                count -= 1
            
        
        root = [i for i in range(n)]
        rank = [1] * n
        count = n
        
        for x, y in edges:
            union(x, y)
            
        return count
