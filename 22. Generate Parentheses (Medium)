# https://leetcode.com/problems/generate-parentheses/

# Solution 1 - Backtracking
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        def backtrack(path, left, right):
            if len(path) == 2 * n:
                res.append(''.join(path))
                return

            if left < n:
                path.append('(')
                backtrack(path, left + 1, right)
                path.pop()

            if right < left:
                path.append(')')
                backtrack(path, left, right + 1)
                path.pop()

        res = []
        path = []
        backtrack(path, 0, 0)

        return res

    
# Solution 2 - DFS
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        def dfs(path, left, right):
            if len(path) == 2 * n:
                res.append(path)
                return

            if left < n:
                dfs(path + '(', left + 1, right)
            
            if right < left:
                dfs(path + ')', left, right + 1)

        res = []
        path = ""

        dfs(path, 0, 0)

        return res
