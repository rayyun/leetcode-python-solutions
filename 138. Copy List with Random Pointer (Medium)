# https://leetcode.com/problems/copy-list-with-random-pointer/

# Solution 1 - Iterative
# O(n) / O(n)
class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        dummy = Node(0)
        copy = dummy
        
        visited = dict()
        visited[None] = None
        
        while head:
            if head not in visited:
                copy.next = Node(head.val)
                visited[head] = copy.next
            else:
                copy.next = visited[head]
                
            if head.random not in visited:
                copy.next.random = Node(head.random.val)
                visited[head.random] = copy.next.random
            else:
                copy.next.random = visited[head.random]
                
            head = head.next
            copy = copy.next
            
        return dummy.next



# Solution 2 - Recursive
# O(n) / O(n)
class Solution:
    def copyRandomList(self, head: 'Optional[Node]') -> 'Optional[Node]':
        visited = dict()

        def copyNode(node):
            if not node:
                return None

            if node in visited:
                return visited[node]

            copy_node = Node(node.val)
            visited[node] = copy_node

            copy_node.next = copyNode(node.next)
            copy_node.random = copyNode(node.random)

            return copy_node

        copy_head = copyNode(head)

        return copy_head
