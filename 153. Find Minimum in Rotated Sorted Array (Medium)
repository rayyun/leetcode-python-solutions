# https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/

# Solution 1 - min() function
# O(n) / O(1)
class Solution:
    def findMin(self, nums: List[int]) -> int:
        return min(nums)
    
    
    
# Solution 2 - Binary Search
# O(log n) / O(1)
class Solution:
    def findMin(self, nums: List[int]) -> int:
        if len(nums) == 1 or nums[0] < nums[-1]:
            return nums[0]

        left, right = 0, len(nums) - 1

        while left < right:
            mid = left + (right - left) // 2

            # if nums[mid-1] > nums[mid] and nums[mid] < nums[mid+1]:
            #     return nums[mid] 

            if nums[mid] > nums[right]:
                left = mid + 1
            else:
                right = mid
        
        return nums[right]
