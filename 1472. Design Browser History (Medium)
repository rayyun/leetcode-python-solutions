# https://leetcode.com/problems/design-browser-history/

# Solution 1 - One stack
class BrowserHistory:

    def __init__(self, homepage: str):
        self.stack = [homepage]
        self.index = 0
        

    def visit(self, url: str) -> None:
        while len(self.stack) > self.index + 1:
            self.stack.pop()
        
        self.stack.append(url)
        self.index += 1
                    

    def back(self, steps: int) -> str:
        self.index = max(0, self.index - steps)
        return self.stack[self.index]
        

    def forward(self, steps: int) -> str:
        self.index = min(len(self.stack) - 1, self.index + steps)
        return self.stack[self.index]
        



# Solution 2 - Doubly Linked List
class ListNode:
    
    def __init__(self, val=0, prev=None, next=None):
        self.val = val
        self.prev = prev
        self.next = next

class BrowserHistory:

    def __init__(self, homepage: str):
        self.root = ListNode(homepage)

    def visit(self, url: str) -> None:
        node = ListNode(url)
        node.prev = self.root
        self.root.next = node
        self.root = self.root.next        
        

    def back(self, steps: int) -> str:
        while self.root.prev and steps > 0:
            self.root = self.root.prev
            steps -= 1
            
        return self.root.val

    def forward(self, steps: int) -> str:
        while self.root.next and steps > 0:
            self.root = self.root.next
            steps -= 1
            
        return self.root.val
