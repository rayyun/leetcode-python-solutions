# https://leetcode.com/problems/step-by-step-directions-from-a-binary-tree-node-to-another/

# O(n) / O(n)
class Solution:
    def getDirections(self, root: Optional[TreeNode], startValue: int, destValue: int) -> str:
        def lowestCommonAncestor(node):
            if not node or node.val == startValue or node.val == destValue:
                return node
            
            left = lowestCommonAncestor(node.left)
            right = lowestCommonAncestor(node.right)
            
            if left and right:
                return node
            else:
                return left or right
            
        lca_root = lowestCommonAncestor(root)
        stack = [(lca_root, '')]
        startPath, destPath = '', ''
        
        while stack:
            node, path = stack.pop()
            
            if node.val == startValue:
                startPath = path
            if node.val == destValue:
                destPath = path
            
            if node.left:
                stack.append((node.left, path + 'L'))
            if node.right:
                stack.append((node.right, path + 'R'))
                
        return 'U' * len(startPath) + destPath
