# https://leetcode.com/problems/validate-binary-search-tree/

# Solution 1 - Recursive with valid range
# O(n) / O(n)
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        def isBST(node, min_val, max_val):
            if not node:
                return True

            if node.val <= min_val or node.val >= max_val:
                return False

            return isBST(node.left, min_val, node.val) and isBST(node.right, node.val, max_val)


        return isBST(root, float('-inf'), float('inf'))

    

# Solution 2 - Iterative with valid range
# O(n) / O(n)
class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        if not root:
            return True

        stack = [(root, float('-inf'), float('inf'))]

        while stack:
            node, min_value, max_value = stack.pop()

            if not node:
                continue

            if node.val <= min_value or node.val >= max_value:
                return False

            stack.append((node.left, min_value, node.val))
            stack.append((node.right, node.val, max_value))

        return True
