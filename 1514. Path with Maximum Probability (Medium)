# https://leetcode.com/problems/path-with-maximum-probability/

# O(n log n + n log K) / O(n) for sort  - K: max(nums) - min(nums)
class Solution:
    def minimizeMax(self, nums: List[int], p: int) -> int:
        nums.sort()
        N = len(nums)

        def count_valid_pairs(maximum):
            idx, count = 0, 0

            while idx < N - 1:
                if nums[idx + 1] - nums[idx] <= maximum:
                    count += 1
                    idx += 2
                else:
                    idx += 1
            
            return count

        left, right = 0, nums[-1] - nums[0]

        while left < right:
            mid = left + (right - left) // 2

            if count_valid_pairs(mid) >= p:
                right = mid
            else:
                left = mid + 1
        
        return left
