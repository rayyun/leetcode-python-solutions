# https://leetcode.com/problems/rotate-list/

# O(n) / O(1)
"""
1. In case of k > N, make a linked list cycle and count the nodes
2. Iterated N - (k%N) - 1 times, find new_tail
3. new_head = new_tail.next
4. new_tail.next = None --> disconnect cycle
4. return new_head
"""

class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        if not head:
            return
        
        if not head.next:
            return head
        
        N = 1
        old_tail = head
        
        while old_tail.next:
            old_tail = old_tail.next
            N += 1
            
        old_tail.next = head
        
        new_tail = head
        
        for _ in range(N - (k % N) - 1):
            new_tail = new_tail.next
            
        new_head = new_tail.next
        
        new_tail.next = None
        
        return new_head
