# https://leetcode.com/problems/minimum-size-subarray-sum/

# Solution 1-1 - Brute Force (TLE)
# O(n^3) / O(1)
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        N = len(nums)
        shortest = float('inf')
        
        for i in range(N):
            for j in range(i, N):
                total_sum = 0
                
                for k in range(i, j+1):
                    total_sum += nums[k]
                    
                if total_sum >= target:
                    shortest = min(shortest, j - i + 1)
                    break
        
        return shortest if shortest < float('inf') else 0
        
        
        
# Solution 1-2 - Brute Force (TLE)
# O(n^2) / O(n)
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        N = len(nums)
        shortest = float('inf')
        sums = [nums[0]] * N
        
        for i in range(1, N):
            sums[i] = sums[i-1] + nums[i]
            
        for i in range(N):
            part_sum = 0
            
            for j in range(i, N):
                part_sum = sums[j] - sums[i] + nums[i]
                
                if part_sum >= target:
                    shortest = min(shortest, j - i + 1)
                    break
                    
        return shortest if shortest < float('inf') else 0
        
        
        
# Solution 2 - Two pointer (Sliding window)
# O(n) / O(1)
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        left = right = 0
        total_sum = 0
        shortest = float('inf')  # shortest = len(nums) + 1
        
        while right < len(nums):
            total_sum += nums[right]
            
            while total_sum >= target:
                shortest = min(shortest, right - left + 1)
                total_sum -= nums[left]
                left += 1                
            
            right += 1
            
        return shortest if shortest < float('inf') else 0
