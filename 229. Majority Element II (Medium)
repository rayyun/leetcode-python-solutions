# https://leetcode.com/problems/majority-element-ii/description/

# Solution 1 - Counter
# O(n) / O(n)
from collections import Counter

class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        N = len(nums)
        num_count = Counter(nums)
        res = []

        for num, count in num_count.items():
            if count > N/3:
                res.append(num)

        return res



# Solution 2 - Boyer-Moore Voting Algorithm
# O(n) / O(1)
class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        if not nums:
            return []

        N = len(nums)
        count_1, count_2, num_1, num_2 = 0, 0, None, None

        for num in nums:
            if num_1 == num:
                count_1 += 1
            elif num_2 == num:
                count_2 += 1
            elif count_1 == 0:
                num_1 = num
                count_1 += 1
            elif count_2 == 0:
                num_2 = num
                count_2 += 1
            else:
                count_1 -= 1
                count_2 -= 1

        res = []        

        for num in [num_1, num_2]:
            if nums.count(num) > N / 3:
                res.append(num)

        return res
