# https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/

# Solution 1
# O(n log n) / O(n)
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        points.sort()

        last_start, last_end = points[0]
        arrows = 1

        for start, end in points[1:]:
            if start <= last_end:
                last_start = max(last_start, start)
                last_end = min(last_end, end)
            else:
                last_start = start
                last_end = end
                arrows += 1
        
        return arrows
        
        
        
# Solution 2
# O(n log n) / O(n)
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        points.sort(key=lambda x: x[1])

        last_end = points[0][1]
        arrows = 1

        for start, end in points[1:]:
            if last_end < start:
                arrows += 1
                last_end = end
        
        return arrows



# Solution 3
# O(n log n) / O(n)
class Solution:
    def findMinArrowShots(self, points: List[List[int]]) -> int:
        points.sort()

        intervals = [points[0]]

        for start, end in points[1:]:
            last_start, last_end = intervals[-1]

            if start <= last_end:
                intervals[-1] = [max(start, last_start), min(end, last_end)]
            else:
                intervals.append([start, end])
        
        return len(intervals)
