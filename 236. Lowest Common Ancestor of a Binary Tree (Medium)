# https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/

# Solution #1. Recurtion - O(n) / O(n)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        def recursive(node):
            if not node or node.val == p.val or node.val == q.val:
                return node
            
            left = recursive(node.left)
            right = recursive(node.right)
            
            if left and right:
                return node
            else:
                return left or right
            
        return recursive(root)


# Solution #2. Iterative - O(n) / O(n)
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        stack = [root]
        parent = {root: None}
        
        while p not in parent or q not in parent:
            node = stack.pop()
            
            if node.left:
                parent[node.left] = node
                stack.append(node.left)
            if node.right:
                parent[node.right] = node
                stack.append(node.right)
                                
        ancestors = set()
        
        while p:
            ancestors.add(p)
            p = parent[p]
            
        while q not in ancestors:
            q = parent[q]
            
        return q
