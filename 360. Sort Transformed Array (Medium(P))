# https://leetcode.com/problems/sort-transformed-array/

# O(n) / O(n)
class Solution:
    def sortTransformedArray(self, nums: List[int], a: int, b: int, c: int) -> List[int]:
        def quadratic(num):
            return a * num**2 + b * num + c
        
        N = len(nums)        
        left, right = 0, N - 1
        index = 0 if a < 0 else N - 1
        res = [0] * N
        
        while left <= right:
            l_val, r_val = quadratic(nums[left]), quadratic(nums[right])
            
            if a >= 0:
                if l_val <= r_val:
                    res[index] = r_val
                    right -= 1
                else:
                    res[index] = l_val
                    left += 1
                
                index -= 1
            
            else:
                if l_val <= r_val:
                    res[index] = l_val
                    left += 1
                else:
                    res[index] = r_val
                    right -= 1
                
                index += 1
            
        return res
