# https://leetcode.com/problems/contiguous-array/

# Solution 1 - Brute Force (TLE)
# O(n^2) / O(1)
class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        res = 0

        for i in range(len(nums)):
            zeros, ones = 0, 0

            for j in range(i, len(nums)):
                if nums[j] == 0:
                    zeros += 1
                else:
                    ones += 1
                
                if zeros == ones:
                    res = max(res, zeros + ones)

        return res



# Solution 2 - Hashmap (Seen)
# O(n) / O(n)
class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        max_length = 0
        seen = dict()
        count = 0

        for idx, num in enumerate(nums):
            if num == 0:
                count -= 1
            elif num == 1:
                count += 1

            if count == 0:
                max_length = idx + 1
            
            if count in seen:
                max_length = max(max_length, idx - seen[count])
            else:
                seen[count] = idx

        return max_length
