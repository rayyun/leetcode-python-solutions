# https://leetcode.com/problems/contiguous-array/

# Solution 1 - Brute Force - TLE
# O(n^2) / O(1)
class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        max_length = 0
        
        for left in range(len(nums)):
            zeros, ones = 0, 0

            for right in range(left, len(nums)):
                if nums[right] == 0:
                    zeros += 1
                else:
                    ones += 1
                
                if zeros == ones:
                    max_length = max(max_length, zeros + ones)
                    # max_length = max(max_length, right - left + 1)
                    
        return max_length
        
        
        
# Solution 2 - HashMap
# O(n) / O(n)
class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        seen = dict()
        max_length = 0
        count = 0
        
        for i in range(len(nums)):
            if nums[i] == 0:
                count -= 1
            elif nums[i] == 1:
                count += 1
                
            if count == 0:
                max_length = i + 1
            
            if count in seen:
                max_length = max(max_length, i - seen[count])
            else:
                seen[count] = i
                
        return max_length
