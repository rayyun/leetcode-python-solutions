# https://leetcode.com/problems/koko-eating-bananas/

# Solution 1 - Brute Force (TLE)
# O(n*m) / O(1) - n: len(piles), m: eating speed
class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        speed = 1

        while True:
            hours = 0

            for pile in piles:
                hours += math.ceil(pile / speed)
            
            if hours <= h:
                return speed
            else:
                speed += 1



# Solution 2 - Binary Search
# O(n log m) / O(1)
class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        left, right = 1, max(piles)

        while left < right:
            mid = (left + right) // 2
            hours = 0

            for pile in piles:
                hours += math.ceil(pile / mid)
            
            if hours <= h:
                right = mid
            else:
                left = mid + 1

        return left
