# https://leetcode.com/problems/all-elements-in-two-binary-search-trees/

# Solution 1 - Inorder Traversal Recursion + Two pointer sort
# O(n+m) / O(n+m)
class Solution:
    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:
        def inorder(node):
            if not node:
                return []
            
            return inorder(node.left) + [node.val] + inorder(node.right)
        
        
        def merge_two(nums1, nums2):
            if not nums1:
                return nums2
            if not nums2:
                return nums1
            
            i, j = len(nums1) - 1, len(nums2) - 1
            nums1 += [float('-inf')] * len(nums2)
            pt = len(nums1) - 1
            
            while j >= 0 and pt >= 0:
                if i >= 0:
                    if nums1[i] >= nums2[j]:
                        nums1[pt], nums1[i] = nums1[i], nums1[pt]
                        i -= 1
                    else:
                        nums1[pt] = nums2[j]
                        j -= 1
                    pt -= 1
                else:
                    nums1[pt] = nums2[j]
                    j -= 1
                    pt -= 1
            
            return nums1
        
        
        nums1 = inorder(root1)
        nums2 = inorder(root2)
        
        return merge_two(nums1, nums2)
        
        
        
# Solution 2 - Inorder Traversal Iteration + Two pointer sort
# O(n+m) / O(n+m)
class Solution:
    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:
        def inorder(node):
            if not node:
                return
            
            stack, res = [], []
            
            while node or stack:
                if node:
                    stack.append(node)
                    node = node.left
                else:
                    node = stack.pop()
                    res.append(node.val)
                    node = node.right
                    
            return res
        
        
        def merge_two(nums1, nums2):
            if not nums1:
                return nums2
            if not nums2:
                return nums1
            
            i, j = len(nums1) - 1, len(nums2) - 1
            nums1 += [float('-inf')] * len(nums2)
            pt = len(nums1) - 1
            
            while j >= 0 and pt >= 0:
                if i >= 0:
                    if nums1[i] >= nums2[j]:
                        nums1[pt], nums1[i] = nums1[i], nums1[pt]
                        i -= 1
                    else:
                        nums1[pt] = nums2[j]
                        j -= 1
                    pt -= 1
                else:
                    nums1[pt] = nums2[j]
                    j -= 1
                    pt -= 1
            
            return nums1
        
        
        nums1 = inorder(root1)
        nums2 = inorder(root2)
        
        return merge_two(nums1, nums2)
        
        
        
# Solution 3 - Brute Force
# O((n+m)*log(n+m)) / O(n+m)
class Solution:
    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:
        def inorder(node):
            if not node:
                return []
            
            return inorder(node.left) + [node.val] + inorder(node.right)
        
        nums1 = inorder(root1)
        nums2 = inorder(root2)
        
        return sorted(nums1 + nums2)
        
        
        
# Solution 4 - Inorder traverse (iteration)  
# O(n+m) / O(n+m)
class Solution:
    def getAllElements(self, root1: TreeNode, root2: TreeNode) -> List[int]:
        stack1, stack2 = [], []
        res = []
        
        while stack1 or stack2 or root1 or root2:
            while root1:
                stack1.append(root1)
                root1 = root1.left
                
            while root2:
                stack2.append(root2)
                root2 = root2.left
                
            if not stack2 or stack1 and stack1[-1].val <= stack2[-1].val:
                root1 = stack1.pop()
                res.append(root1.val)
                root1 = root1.right
            else:
                root2 = stack2.pop()
                res.append(root2.val)
                root2 = root2.right
        
        return res
