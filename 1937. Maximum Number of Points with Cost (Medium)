# https://leetcode.com/problems/maximum-number-of-points-with-cost/

# O(m * n) / O(m)
class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        def leftTracker(arr):
            left = [arr[0]] + [0] * (len(arr) - 1)
            
            for i in range(1, len(arr)):
                left[i] = max(left[i-1] - 1, arr[i])
                
            return left
        
        def rightTracker(arr):
            right = [0] * (len(arr) - 1) + [arr[-1]]
            
            for i in range(len(arr) - 2, -1, -1):
                right[i] = max(right[i+1] - 1, arr[i])
                
            return right
        
        
        prev = points[0]
        
        for row in range(len(points) - 1):
            left, right = leftTracker(prev), rightTracker(prev)
            curr = [0] * len(points[0])
            
            for i in range(len(curr)):
                curr[i] = max(left[i], right[i]) + points[row+1][i]
            
            prev = curr[:]
        
        return max(prev)
