# https://leetcode.com/problems/search-a-2d-matrix-ii/

# Solution 1 - Brute Force
# O(mn) / O(1)
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        for row in matrix:
            if target in row:
                return True
            
        return False
        
        
        
# Solution 2 - Binary Search
# O(m log n) / O(1)
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        def binarySearch(row, target):
            left, right = 0, len(row) - 1
            
            while left <= right:
                mid = left + (right - left) // 2
                if row[mid] == target:
                    return True
                elif row[mid] < target:
                    left = mid + 1
                else:
                    right = mid - 1
            
            return False
        
        
        for row in matrix:
            if binarySearch(row, target):
                return True
            
        return False
        
        
        
# Solution 3 - Search Space Reduction
# O(m+n) / O(1)
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        M, N = len(matrix), len(matrix[0])
        
        r, c = M - 1, 0
        
        while 0 <= r < M and 0 <= c < N:
            if matrix[r][c] == target:
                return True
            elif matrix[r][c] < target:
                c += 1
            else:
                r -= 1
                
        return False
