# https://leetcode.com/problems/check-completeness-of-a-binary-tree/

# Solution 1 - BFS (Level Order) 
# O(n) / O(n)
from collections import deque

class Solution:
    def isCompleteTree(self, root: Optional[TreeNode]) -> bool:
        queue = deque([(root, 0, 1)])  # (node, level, num)

        while queue:
            level_size = len(queue)

            for n in range(1, level_size + 1):
                node, level, num = queue.popleft()

                if n != num:
                    return False
                
                if node.left:
                    if level_size < 2**level:
                        return False

                    queue.append((node.left, level + 1, 2 * num - 1))
                
                if node.right:
                    if not node.left:
                        return False
                    
                    queue.append((node.right, level + 1, 2 * num))
        
        return True



# Solution 2 - BFS (Level Order) 
# O(n) / O(n)
from collections import deque

class Solution:
    def isCompleteTree(self, root: Optional[TreeNode]) -> bool:
        queue = deque([root])
        prev_node = root

        while queue:
            curr_node = queue.popleft()

            if curr_node:
                if not prev_node:
                    return False

                queue.append(curr_node.left)
                queue.append(curr_node.right)

            prev_node = curr_node

        return True
