# https://leetcode.com/problems/binary-tree-right-side-view/description/

# Solution 1 - BFS
# O(n) / O(D) - D : Tree Diameter
from collections import deque

class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []

        queue = deque([root])
        right_view = []

        while queue:
            level_length = len(queue)
            right_view.append(queue[-1].val)

            for i in range(level_length):
                node = queue.popleft()

                if node.left:
                    queue.append(node.left)
                
                if node.right:
                    queue.append(node.right)

        return right_view



# Solution 2 - DFS
# O(n) / O(h)  h: tree height
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return []

        right_view = []

        def dfs(node, level):
            if level == len(right_view):
                right_view.append(node.val)

            if node.right:
                dfs(node.right, level + 1)

            if node.left:
                dfs(node.left, level + 1)

        dfs(root, 0)

        return right_view
