# https://leetcode.com/problems/maximum-subarray/

# Solution 1 - DP (Kadane's algorithm)
# O(n) / O(1)
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_sum = nums[0]
        sub_sum = nums[0]
        
        for i in range(1, len(nums)):
            if sub_sum < 0 :
                sub_sum = nums[i]
            else:
                sub_sum += nums[i]
                
            max_sum = max(max_sum, sub_sum)
            
        return max_sum
        
        
        
# Solution 2 - Divide & Conquer
# O(n log n) / O(log n)
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        def findMaxSubArray(left, right):
            if left > right:
                return float('-inf')
            
            mid = (left + right) // 2
            curr_sum = max_left_sum = max_right_sum = 0
            
            for i in range(mid - 1, left - 1, -1):
                curr_sum += nums[i]
                max_left_sum = max(max_left_sum, curr_sum)
                
            curr_sum = 0
            
            for i in range(mid + 1, right + 1):
                curr_sum += nums[i]
                max_right_sum = max(max_right_sum, curr_sum)
                
            max_sum = max_left_sum + nums[mid] + max_right_sum
            
            left_half = findMaxSubArray(left, mid-1)
            right_half = findMaxSubArray(mid+1, right)
            
            return max(max_sum, left_half, right_half)
        
        return findMaxSubArray(0, len(nums) - 1)
