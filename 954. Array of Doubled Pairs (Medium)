# https://leetcode.com/problems/array-of-doubled-pairs/

# Solution #1 - O(n log n) / O(n)
from collections import Counter

class Solution:
    def canReorderDoubled(self, arr: List[int]) -> bool:
        count = Counter(arr)
        
        for n in sorted(arr, key=abs):
            if count[n] == 0:
                continue
            
            if count[2 * n] == 0:
                return False
            
            count[n] -= 1
            count[2 * n] -= 1
            
        return True
        

# Solution #2 - O(n log n) / O(n)
from collections import Counter

class Solution:
    def canReorderDoubled(self, arr: List[int]) -> bool:
        count = Counter(arr)
        
        for n in sorted(count.keys(), key=abs):
            while count[n] > 0 and count[n * 2] > 0:
                count[n] -= 1
                count[2 * n] -= 1
                
        return not any(count.values())
