# https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/

"""
# Definition for a Node.
class Node:
    def __init__(self, val: int = 0, left: 'Node' = None, right: 'Node' = None, next: 'Node' = None):
        self.val = val
        self.left = left
        self.right = right
        self.next = next
"""


# Solution 1 - BFS (Level Order)
# O(n) / O(n)
from collections import deque

class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return
        
        queue = deque([root])
        
        while queue:
            level_length = len(queue)
            
            for i in range(1, level_length + 1):
                node = queue.popleft()
                
                if i < level_length:
                    node.next = queue[0]
                    
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        
        return root
        
        

# Solution 2 - BFS - level by level with dummy head(for child level)
# O(n) / O(1)
class Solution:
    def connect(self, root: 'Node') -> 'Node': 
        dummy = child = Node(0)
        node = root
        
        while node:
            child.next = node.left
            if child.next:
                child = child.next
            
            child.next = node.right
            if child.next:
                child = child.next
                
            node = node.next
            
            if not node:
                child = dummy
                node = dummy.next
                
        return root
