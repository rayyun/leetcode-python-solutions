# https://leetcode.com/problems/moving-average-from-data-stream/

# Solution 1 - list
# O(n) / O(m) - n: size of sliding window, m: size of queue 
class MovingAverage:

    def __init__(self, size: int):
        self.size = size
        self.queue = []
        

    def next(self, val: int) -> float:
        self.queue.append(val)
        
        if len(self.queue) < self.size:
            return sum(self.queue) / len(self.queue)
        else:
            return sum(self.queue[-self.size:]) / self.size
            
            
            
# Solution 2 - deque
# O(1) / O(n) - n: size of sliding window
class MovingAverage:

    def __init__(self, size: int):
        self.queue = collections.deque()
        self.size = size
        self.window_sum = 0
        self.count = 0

    def next(self, val: int) -> float:
        self.queue.append(val)
        self.count += 1
        self.window_sum += val
        
        if self.count > self.size:
            self.window_sum -= self.queue.popleft()
            self.count -= 1
        
        return self.window_sum / self.count
