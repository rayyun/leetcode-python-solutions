# https://leetcode.com/problems/perfect-squares/

# Solution 1 - DP
# O(n * n**0.5) / O(n)
class Solution:
    def numSquares(self, n: int) -> int:
        # square_list = [i * i for i in range(1, n+1) if int(i ** 0.5) ** 2 == i]
        square_list = [i * i for i in range(1, int(n**0.5) + 1)]
        
        dp = [float('inf')] * (n+1)
        dp[0] = 0
        
        for i in range(1, n+1):
            for square in square_list:
                if i < square:
                    break
                
                dp[i] = min(dp[i], dp[i-square] + 1)
                
        return dp[-1]
        
        
        
# Solution 2 - Recursion?
class Solution:
    def numSquares(self, n: int) -> int:
        def is_divided_by(num, count):
            if count == 1:
                return num in square_list
            
            for square in square_list:
                if is_divided_by(num - square, count - 1):
                    return True
            
            return False            
            
        square_list = [i * i for i in range(1, int(n**0.5) + 1)]
        
        for count in range(1, n+1):
            if is_divided_by(n, count):
                return count
