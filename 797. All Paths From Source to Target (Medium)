# https://leetcode.com/problems/all-paths-from-source-to-target/

# Solution 1 - Backtracking
# O(2^N⋅N) / O(2^N⋅N)
class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        def backtrack(node, path):
            if node == target:
                res.append(list(path))
                return
            
            for next_node in graph[node]:
                path.append(next_node)
                backtrack(next_node, path)
                path.pop()
        
        path = [0]
        target = len(graph) - 1
        res = []
        
        backtrack(0, path)
        
        return res
        
        
        
# Solution 2 - DFS
# O(2^N⋅N) / O(2^N⋅N)
class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        def dfs(node, path):
            if node == target:
                res.append(path)
                return
            
            for next_node in graph[node]:
                dfs(next_node, path + [next_node])            
            
        target = len(graph) - 1
        res = []
        dfs(0, [0])
        
        return res
