# https://leetcode.com/problems/paint-house/

# Solution 1 - DP
# O(n) / O(1)
class Solution:
    def minCost(self, costs: List[List[int]]) -> int:
        N = len(costs)
        
        for i in range(1, N):
            costs[i][0] += min(costs[i-1][1], costs[i-1][2])
            costs[i][1] += min(costs[i-1][0], costs[i-1][2])
            costs[i][2] += min(costs[i-1][0], costs[i-1][1])
            
        return min(costs[-1])


# Solution 2 - Memoization
# O(n) / O(n)
class Solution:
    def minCost(self, costs: List[List[int]]) -> int:
        def paint_cost(n, color):
            if (n, color) in self.memo:
                return self.memo[(n, color)]
            
            total_cost = costs[n][color]
            
            if n < N - 1:
                if color == 0:
                    total_cost += min(paint_cost(n+1, 1), paint_cost(n+1, 2))
                elif color == 1:
                    total_cost += min(paint_cost(n+1, 0), paint_cost(n+1, 2))
                else:
                    total_cost += min(paint_cost(n+1, 0), paint_cost(n+1, 1))
            
            self.memo[(n, color)] = total_cost
            return total_cost
        
        N = len(costs)
        self.memo = {}
        return min(paint_cost(0, 0), paint_cost(0, 1), paint_cost(0, 2))
