# https://leetcode.com/problems/longest-continuous-increasing-subsequence

# Solution 1
# O(n) / O(1)
class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        if not nums:
            return 0

        longest = 1
        length = 1

        for i in range(1, len(nums)):
            if nums[i-1] < nums[i]:
                length += 1
                longest = max(longest, length)
            else:
                length = 1
        
        return longest



# Solution 2
# O(n) / O(1)
class Solution:
    def findLengthOfLCIS(self, nums: List[int]) -> int:
        starting, longest = 0, 0

        for i in range(len(nums)):
            if i > 0 and nums[i-1] >= nums[i]:
                starting = i

            longest = max(longest, i - starting + 1)
        
        return longest
