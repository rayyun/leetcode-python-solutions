# https://leetcode.com/problems/lru-cache/

# Solution 1 - Hashmap
# get, put : O(1) / O(capacity)
class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.cache = dict()

    def get(self, key: int) -> int:
        if key in self.cache:
            value = self.cache.pop(key)
            self.cache[key] = value
            
            return value
        else:
            return -1           
        

    def put(self, key: int, value: int) -> None:
        if key not in self.cache:
            self.cache[key] = value
            
            if len(self.cache) > self.capacity:
                oldest_key = list(self.cache.keys())[0]
                self.cache.pop(oldest_key)            
            
        else:
            self.cache.pop(key)
            self.cache[key] = value
