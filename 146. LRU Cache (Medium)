# https://leetcode.com/problems/lru-cache/

# Solution 1 - Hashmap
# get, put : O(1) / O(capacity)
class LRUCache:

    def __init__(self, capacity: int):
        self.cache = dict()
        self.capacity = capacity
        

    def get(self, key: int) -> int:
        if key in self.cache:
            last_used = self.cache[key]
            del self.cache[key]
            self.cache[key] = last_used

            return last_used
        else:
            return -1
        

    def put(self, key: int, value: int) -> None:
        if key not in self.cache:
            if len(self.cache) >= self.capacity:
                del self.cache[list(self.cache.keys())[0]]
            
            self.cache[key] = value
        else:
            del self.cache[key]
            self.cache[key] = value
            

            
            
# Solution 2 - Ordered Dict
# get, put : O(1) / O(capacity)
from collections import OrderedDict

class LRUCache:

    def __init__(self, capacity: int):
        self.cache = OrderedDict()
        self.capacity = capacity
        

    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1

        value = self.cache.pop(key)
        self.cache[key] = value

        return value
        

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.cache.pop(key)
            self.cache[key] = value
        else:
            if len(self.cache) >= self.capacity:
                self.cache.popitem(last=False)
            
            self.cache[key] = value

            
            
            
# Solution 3 - Doubly Linked List + Hash
# get, put : O(1) / O(capacity)
class DLinkedNode():

    def __init__(self):
        self.key = 0
        self.value = 0
        self.prev = None
        self.next = None


class LRUCache:

    def _add_node(self, node):
        node.prev = self.head
        node.next = self.head.next

        self.head.next.prev = node
        self.head.next = node


    def _remove_node(self, node):
        before = node.prev
        after = node.next

        before.next = after
        after.prev = before


    def _move_to_head(self, node):
        self._remove_node(node)
        self._add_node(node)

    
    def _pop_tail(self):
        tail_node = self.tail.prev
        self._remove_node(tail_node)

        return tail_node


    def __init__(self, capacity: int):
        self.cache = dict()
        self.size = 0
        self.capacity = capacity
        self.head, self.tail = DLinkedNode(), DLinkedNode()

        self.head.next = self.tail
        self.tail.prev = self.head
        

    def get(self, key: int) -> int:
        if key not in self.cache:
            return -1
        
        node = self.cache[key]
        self._move_to_head(node)

        return node.value
        

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            node = self.cache[key]
            self._move_to_head(node)
            node.value = value
        else:
            new_node = DLinkedNode()
            new_node.key = key
            new_node.value = value

            if self.size >= self.capacity:
                removed_node = self._pop_tail()
                self.size -= 1
                del self.cache[removed_node.key]

            self._add_node(new_node)
            self.cache[key] = new_node
            self.size += 1
