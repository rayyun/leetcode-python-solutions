# https://leetcode.com/problems/simplify-path/

# Solution 1 - Stack, str.split()
# O(n) / O(n)
class Solution:
    def simplifyPath(self, path: str) -> str:
        path_list = path.split('/')
        
        stack = []
        
        for p in path_list:
            if p == '..':
                if stack:
                    stack.pop()
            elif p not in ('.', ''):
                stack.append(p)
        
        return '/' + '/'.join(stack)


# Solution 2 - Stack, str.find()
# O(n) / O(n)
class Solution:
    def simplifyPath(self, path: str) -> str:
        stack = []

        while path:
            pos = path.find('/')

            if pos >= 0:
                tmp, path = path[:pos], path[pos+1:]
            else:
                tmp, path = path, ''

            if tmp == '..':
                if stack:
                    stack.pop()
            elif tmp not in ('.', ''):
                stack.append(tmp)

        return '/' + '/'.join(stack)
