# https://leetcode.com/problems/find-all-possible-recipes-from-given-supplies/

# Solution - Topological Sort
# O(V+E) / O(V+E)
from collections import defaultdict, deque

class Solution:
    def findAllRecipes(self, recipes: List[str], ingredients: List[List[str]], supplies: List[str]) -> List[str]:
        adj_list = defaultdict(list)
        indegree = defaultdict(int)
        res = []
        queue = deque()

        for supply in supplies:
            indegree[supply] = 0
            queue.append(supply)

        for idx, recipe in enumerate(recipes):
            for ingredient in ingredients[idx]:
                adj_list[ingredient].append(recipe)
                indegree[recipe] += 1

        recipes = set(recipes)

        while queue:
            node = queue.popleft()

            if node in recipes:
                res.append(node)

            for next_node in adj_list[node]:
                indegree[next_node] -= 1

                if indegree[next_node] == 0:
                    queue.append(next_node)
            
        return res
