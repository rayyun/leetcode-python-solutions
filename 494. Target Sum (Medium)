# https://leetcode.com/problems/target-sum/

# Solution 1
# O(t*n) / O(t*n) - t : sum of the nums
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        def dfs(currSum, nums):
            key = (currSum, tuple(nums))
            
            if key in seen:
                return seen[key]
            
            if not nums:
                return currSum == target
            
            res = dfs(currSum + nums[0], nums[1:]) + dfs(currSum - nums[0], nums[1:])
            seen[key] = res
            
            return res
        
        
        seen = dict()
        return dfs(0, nums)


# Solution 2
# O(t*n) / O(t*n) - t : sum of the nums
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        def dfs(idx, currSum):
            key = (idx, currSum)
            
            if key in seen:
                return seen[key]
            
            if idx == len(nums):
                return 1 if currSum == target else 0
            
            add = dfs(idx + 1, currSum + nums[idx])
            substract = dfs(idx + 1, currSum - nums[idx])
            
            seen[key] = add + substract
            return add + substract
        
        seen = dict()
        return dfs(0, 0)
