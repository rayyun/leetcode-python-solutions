# https://leetcode.com/problems/ransom-note/description/

# Solution 1 - Two hash
# O(n) / O(1)
from collections import Counter

class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        if len(ransomNote) > len(magazine):
            return False

        note_count = Counter(ransomNote)
        magazine_count = Counter(magazine)

        for char, count in note_count.items():
            if char not in magazine_count or count > magazine_count[char]:
                return False
        
        return True



# Solution 2 - One hash    
# O(n) / O(1)    
from collections import Counter

class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        if len(ransomNote) > len(magazine):
            return False

        magazine_count = Counter(magazine)

        for char in ransomNote:
            if char not in ransomNote or magazine_count[char] <= 0:
                return False
            else:
                magazine_count[char] -= 1
        
        return True
