# https://leetcode.com/problems/increasing-triplet-subsequence/

# Solution 1 - Brute Force - TLE
# O(n^3) / O(1)
class Solution:
    def increasingTriplet(self, nums: List[int]) -> bool:
        for i in range(len(nums) - 2):
            for j in range(i, len(nums) - 1):
                for k in range(j, len(nums)):
                    if nums[i] < nums[j] < nums[k]:
                        return True
        
        return False

    

# Solution 2 - Linear Scan
# O(n) / O(1)
class Solution:
    def increasingTriplet(self, nums: List[int]) -> bool:
        first, second = float('inf'), float('inf')

        for num in nums:
            if num <= first:
                first = num
            elif num <= second:
                second = num
            else:
                return True

        return False

    
    
# Solution 3 - Max_Right / Min_Left
# O(n) / O(n)
class Solution:
    def increasingTriplet(self, nums: List[int]) -> bool:
        N = len(nums)
        max_right = [0] * N
        max_right[-1] = nums[-1]
        
        for i in range(N-2, -1, -1):
            max_right[i] = max(max_right[i+1], nums[i+1])
        
        min_left = nums[0]

        for i in range(1, N-1):
            if min_left < nums[i] < max_right[i]:
                return True
            
            min_left = min(min_left, nums[i])
        
        return False
