# https://leetcode.com/problems/top-k-frequent-elements/

# O(n log k) / O(n)
from collections import Counter
import heapq

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        num_count = Counter(nums)
        heap = []
        res = []

        for num, count in num_count.items():
            heapq.heappush(heap, (count, num))

            if len(heap) > k:
                heapq.heappop(heap)

        while heap:
            res.append(heapq.heappop(heap)[1])

        return res
