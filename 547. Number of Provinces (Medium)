# https://leetcode.com/problems/number-of-provinces/

# Solution 1 - Union Find (Basic)
# O(n^3) / O(n)
class Solution:
    def findCircleNum(self, isConnected: List[List[int]]) -> int:
        def find(x):
            while x != root[x]:
                x = root[x]
                
            return x
        
        def union(x, y):
            rootX = find(x)
            rootY = find(y)
            
            if rootX != rootY:
                root[rootY] = rootX
                                
        
        N = len(isConnected)
        root = [i for i in range(N)]
        
        for i in range(N):
            for j in range(N):
                if isConnected[i][j] and i != j:
                    union(i, j)
                    
        return len(set(find(i) for i in range(N)))
