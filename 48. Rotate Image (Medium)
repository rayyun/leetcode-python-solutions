# https://leetcode.com/problems/rotate-image/

# Solution 1 - Rotate Groups of Four Cells
# O(n^2) / O(1)
class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        n = len(matrix)
        
        for i in range(n // 2 + n % 2):
            for j in range(n // 2):
                temp = matrix[i][j]
                matrix[i][j] = matrix[n - 1 - j][i]
                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j]
                matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i]
                matrix[j][n - 1 - i] = temp



# Solution 2 - Reverse on Diagonal / Reverse Left to Right
# O(n^2) / O(1)
class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        N = len(matrix)

        for r in range(N):
            for c in range(r, N):
                matrix[r][c], matrix[c][r] = matrix[c][r], matrix[r][c]

        for r in range(N):
            for c in range(N // 2):
                matrix[r][c], matrix[r][N - 1 - c] = matrix[r][N - 1 - c], matrix[r][c]


    
# Solution 3 - Reverse the rows / Flip Flop - left triangle <-> right triangle
# O(n^2) / O(1)
class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        n = len(matrix)

        # Reverse the matrix (rows)
        l, r = 0, len(matrix) - 1
        
        while l < r:
            matrix[l], matrix[r] = matrix[r], matrix[l]
            l += 1
            r -= 1
        
        # Flip Flop - left triangle : right triangle
        for i in range(n):
            for j in range(i):
                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]
