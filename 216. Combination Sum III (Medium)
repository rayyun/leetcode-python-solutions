# https://leetcode.com/problems/combination-sum-iii/

class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        def backtrack(remain, path, start):
            if remain == 0 and len(path) == k:
                res.append(path[:])
                return
            
            if remain < 0 or len(path) == k:
                return
            
            for i in range(start, 10):
                path.append(i)
                backtrack(remain - i, path, i + 1)
                path.pop()
                
        res = []
        backtrack(n, [], 1)
        
        return res
