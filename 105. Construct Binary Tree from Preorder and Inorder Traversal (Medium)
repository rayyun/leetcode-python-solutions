# https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/

# Solution 1 - Simple, but slow recursion
# O(n^2) / O(n)
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:        
        if inorder:                                
            root = TreeNode(preorder.pop(0))

            root_idx = inorder.index(root.val)
            root.left = self.buildTree(preorder, inorder[:root_idx])
            root.right = self.buildTree(preorder, inorder[root_idx + 1:])
            
            return root
            
       
# Solution 2 - Fast recursion
# O(n) / O(n)
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        def treeBuilder(left, right):
            if left > right:
                return None
                
            nonlocal preorder_idx
            
            root = TreeNode(preorder[preorder_idx])
            preorder_idx += 1
            
            root.left = treeBuilder(left, inorder_map[root.val] - 1)
            root.right = treeBuilder(inorder_map[root.val] + 1, right)
            
            return root
            
        
        inorder_map = {n: idx for idx, n in enumerate(inorder)}
        preorder_idx = 0
        return treeBuilder(0, len(inorder) - 1)
