# https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/

# Solution 1 - Sliding Window - indirect
# O(n) / O(1)
class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        N = len(nums)
        target_sum = sum(nums) - x
        curr_sum = 0
        left, right = 0, 0
        max_sub_length = 0
        found = False

        for right in range(N):
            curr_sum += nums[right]

            while curr_sum > target_sum and left <= right:
                curr_sum -= nums[left]
                left += 1
            
            if curr_sum == target_sum:
                found = True
                max_sub_length = max(max_sub_length, right - left + 1)
        
        return N - max_sub_length if found else -1 
        
        
        
# Solution 2 - Sliding Window - direct
# O(n) / O(1)
class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        N = len(nums)
        curr_sum = sum(nums)
        left, right = 0, 0
        min_length = N
        found = False

        for right in range(N):
            curr_sum -= nums[right]

            while curr_sum < x and left <= right:
                curr_sum += nums[left]
                left += 1
            
            if curr_sum == x:
                found = True
                min_length = min(min_length, (N - 1 - right) + left)

        return min_length if found else -1
