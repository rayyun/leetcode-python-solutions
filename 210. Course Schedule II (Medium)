# https://leetcode.com/problems/course-schedule-ii/description/

# Solution 1 - Topological Sort
# O(V+E) / O(V+E)   V: number of vertices, E : number of edges
from collections import deque, defaultdict

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        course_dict = defaultdict(list)
        in_degree = defaultdict(int)
        queue = deque([])

        res = []

        for course, pre_req in prerequisites:
            course_dict[pre_req].append(course)
            in_degree[course] += 1

        for course in range(numCourses):
            if course not in in_degree:
                queue.append(course)

        while queue:
            course = queue.popleft()
            res.append(course)

            for next_course in course_dict[course]:
                in_degree[next_course] -= 1

                if in_degree[next_course] == 0:
                    queue.append(next_course)

        return res if len(res) == numCourses else [] 
        # if cycle existed, nodes in cycle weren't added to res



# Solution 2 - DFS
# O(V+E) / O(V+E)   V: number of vertices, E : number of edges
from collections import defaultdict

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        course_dict = defaultdict(list)
        res = []

        for course, pre_req in prerequisites:
            course_dict[pre_req].append(course)

        visited = [0] * numCourses

        def dfs(curr_course):
            if visited[curr_course] == -1:  # found cycle
                return False

            if visited[curr_course] == 1:   # already visited
                return True

            visited[curr_course] = -1       # for cycle check

            for next_course in course_dict[curr_course]:
                if not dfs(next_course):
                    return False            # found cycle
            
            visited[curr_course] = 1
            res.append(curr_course)

            return True

        for course in range(numCourses):
            if not dfs(course):
                return []

        return res[::-1]
