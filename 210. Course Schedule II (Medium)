# https://leetcode.com/problems/course-schedule-ii/description/

# Solution - Topological Sort
# O(V+E) / O(V+E)
from collections import defaultdict, deque

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        adj_list = defaultdict(list)
        indegree = defaultdict(int)
        queue = deque()
        res = []

        for course, prereq in prerequisites:
            adj_list[prereq].append(course)
            indegree[course] += 1
        
        for course in range(numCourses):
            if course not in indegree:
                queue.append(course)

        while queue:
            node = queue.popleft()
            res.append(node)

            for next_node in adj_list[node]:
                indegree[next_node] -= 1

                if indegree[next_node] == 0:
                    queue.append(next_node)

        return res if len(res) == numCourses else []
