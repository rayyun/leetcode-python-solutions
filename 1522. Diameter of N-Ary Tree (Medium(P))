# https://leetcode.com/problems/diameter-of-n-ary-tree/

"""
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children if children is not None else []
"""


# Solution 1 - DFS with height
# O(n) / O(n)
class Solution:
    def diameter(self, root: 'Node') -> int:
        """
        :type root: 'Node'
        :rtype: int
        """        
        def height(node):
            nonlocal longest_path
            
            if len(node.children) == 0:
                return 0
            
            max_height1, max_height2 = 0, 0
            
            for child in node.children:
                parent_height = height(child) + 1
                
                if parent_height > max_height1:
                    max_height1, max_height2 = parent_height, max_height1
                elif parent_height > max_height2:
                    max_height2 = parent_height
                    
            distance = max_height1 + max_height2
            longest_path = max(longest_path, distance)
            
            return max_height1
            
        longest_path = 0
        height(root)
        
        return longest_path
        
        
        
        
# Solution 2 - DFS with depth
# O(n) / O(n)
class Solution:
    def diameter(self, root: 'Node') -> int:
        """
        :type root: 'Node'
        :rtype: int
        """        
        def max_depth(node, curr_depth):
            nonlocal longest_path
            
            if len(node.children) == 0:
                return curr_depth
            
            max_depth1, max_depth2 = curr_depth, 0
            
            for child in node.children:
                depth = max_depth(child, curr_depth + 1)
                
                if depth > max_depth1:
                    max_depth1, max_depth2 = depth, max_depth1
                elif depth > max_depth2:
                    max_depth2 = depth
            
            distance = max_depth1 + max_depth2 - 2 * curr_depth
            longest_path = max(longest_path, distance)
            
            return max_depth1
                
            
        longest_path = 0
        max_depth(root, 0)
        
        return longest_path
