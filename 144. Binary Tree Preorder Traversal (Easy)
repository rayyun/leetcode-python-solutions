# https://leetcode.com/problems/binary-tree-preorder-traversal/

# Solution 1 - Recursion
# O(n) / O(n)
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        def preorder(node):
            if not node:
                return []
            
            return [node.val] + preorder(node.left) + preorder(node.right)
        
        return preorder(root)
        
        
        
# Solution 2 - Iterative
# O(n) / O(n)
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        if not root:
            return
        
        stack = [root]
        res = []
        
        while stack:
            node = stack.pop()
            res.append(node.val)
            
            if node.right:
                stack.append(node.right)
            if node.left:
                stack.append(node.left)
                
        return res           
