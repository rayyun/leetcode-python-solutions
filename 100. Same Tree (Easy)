# https://leetcode.com/problems/same-tree

# Solution 1 - Recursion
# O(n) / O(n)
class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if not p and not q:
            return True
        
        if not p or not q):
            return False

        if p.val != q.val:
            return False

        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)  
 
 
    
# Solution 2 - Iteration
# O(n) / O(n) 
from collections import deque

class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        def isSame(node1, node2):
            if not node1 and not node2:
                return True

            if not node1 or not node2:
                return False

            if node1.val != node2.val:
                return False
            
            return True

        queue = deque([(p, q)])

        while queue:
            p, q = queue.popleft()

            if not isSame(p, q):
                return False
            
            if p:
                queue.append((p.left, q.left))
                queue.append((p.right, q.right))

        return True
