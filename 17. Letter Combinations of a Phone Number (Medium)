# https://leetcode.com/problems/letter-combinations-of-a-phone-number/

# O(4^Nâ‹…N) / O(N)  - 4: hashmap value's length(eg: 'wxzy'), N : length of digits
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        def backtrack(index, path):
            if len(path) == len(digits):
                res.append(''.join(path[:]))
                return
            
            for c in letter_map[digits[index]]:
                path.append(c)
                backtrack(index + 1, path)
                path.pop()
        
        letter_map = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', 
                      '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}        
        res = []
        
        if not digits:
            return []
        
        backtrack(0, [])
        
        return res
