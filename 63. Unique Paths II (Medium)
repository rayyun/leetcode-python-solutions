# https://leetcode.com/problems/unique-paths-ii/description/

# Solution 1 - DP
# O(m*n) / O(m*n)
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        if obstacleGrid[0][0] == 1 or obstacleGrid[-1][-1] == 1:
            return 0

        R = len(obstacleGrid)
        C = len(obstacleGrid[0])

        dp = [[0] * C for _ in range(R)]
        dp[0][0] = 1

        for r in range(R):
            for c in range(C):
                if obstacleGrid[r][c] == 1:
                    dp[r][c] == 0
                else:
                    if r == 0 or c == 0:
                        if r == 0 and c > 0 and dp[r][c-1] == 0:
                            dp[r][c] = 0
                        elif c == 0 and r > 0 and dp[r-1][c] == 0:
                            dp[r][c] = 0
                        else:
                            dp[r][c] = 1
                    else:
                        dp[r][c] = dp[r-1][c] + dp[r][c-1]

        return dp[-1][-1]




# Solution 2 - DP (O(1) Space Complexity)
# O(m*n) / O(1)
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        R = len(obstacleGrid)
        C = len(obstacleGrid[0])

        if obstacleGrid[0][0] == 1:
            return 0

        obstacleGrid[0][0] = 1

        for r in range(1, R):
            if obstacleGrid[r][0] == 0 and obstacleGrid[r-1][0] == 1:
                obstacleGrid[r][0] = 1
            else:
                obstacleGrid[r][0] = 0

            # obstacleGrid[r][0] = int(obstacleGrid[r][0] == 0 and obstacleGrid[r-1][0])

        for c in range(1, C):
            if obstacleGrid[0][c] == 0 and obstacleGrid[0][c-1] == 1:
                obstacleGrid[0][c] = 1
            else:
                obstacleGrid[0][c] = 0

            # obstacleGrid[0][c] = int(obstacleGrid[0][c] == 0 and obstacleGrid[0][c-1])

        for r in range(1, R):
            for c in range(1, C):
                if obstacleGrid[r][c] == 1:
                    obstacleGrid[r][c] = 0
                else:
                    obstacleGrid[r][c] = obstacleGrid[r-1][c] + obstacleGrid[r][c-1]

        return obstacleGrid[-1][-1]
