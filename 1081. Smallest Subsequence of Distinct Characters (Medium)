# https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/

# Solution 1
# O(n) / O(n)
class Solution:
    def smallestSubsequence(self, s: str) -> str:
        s_counter = collections.Counter(s)
        seen = set()
        stack = []

        for c in s:
            if c not in seen:
                while stack and c < stack[-1] and s_counter[stack[-1]] >= 1:
                    seen.remove(stack.pop())
                
                stack.append(c)
                seen.add(c)

            s_counter[c] -= 1
        
        return ''.join(stack)
    
    
    
# Solution 2
# O(n) / O(n)    
class Solution:
    def smallestSubsequence(self, s: str) -> str:
        stack = []
        seen = set()
        last_index = {c: idx for idx, c in enumerate(s)}

        for idx, c in enumerate(s):
            if c not in seen:
                while stack and c < stack[-1] and idx < last_index[stack[-1]]:
                    seen.remove(stack.pop())
                
                stack.append(c)
                seen.add(c)
            
        return ''.join(stack)
