# https://leetcode.com/problems/single-element-in-a-sorted-array/

# Solution 1 - Binary Search
# O(log n) / O(1)
class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        l, r = 0, len(nums) - 1
        
        while l < r:
            mid = l + (r - l) // 2
            
            if nums[mid] == nums[mid - 1]:
                if (mid - l) % 2 == 0:
                    r = mid - 2
                else:
                    l = mid + 1
            elif nums[mid] == nums[mid + 1]:
                if (r - mid) % 2 == 0:
                    l = mid + 2
                else:
                    r = mid - 1
            else:
                return nums[mid]
                    
        
        return nums[r]
        
   
# Solution 2 - Binary Search
# O(log n) / O(1)
class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        l, r = 0, len(nums) - 1
        
        while l < r:
            mid = l + (r - l) // 2
            
            right_is_even = (r - mid) % 2 == 0
            
            if nums[mid] == nums[mid + 1]:
                if right_is_even:
                    l = mid + 2
                else:
                    r = mid - 1
                    
            elif nums[mid] == nums[mid - 1]:
                if right_is_even:
                    r = mid - 2
                else:
                    l = mid + 1
            
            else:
                return nums[mid]
            
        return nums[r]
        
        
# Solution 3 - Binary Search on even indexes only
# O(log n/2) = O(log n) / O(1)
class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        l, r = 0, len(nums) - 1
        
        while l < r:
            mid = l + (r - l) // 2
            
            if mid % 2 == 1:
                mid = mid - 1
                
            if nums[mid] == nums[mid + 1]:
                l = mid + 2
            else:
                r = mid
                
        return nums[r]
        
        
# Solution 4 - Brute Force
# O(n) / O(1)
class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        for i in range(0, len(nums) - 1, 2):
            if nums[i] != nums[i+1]:
                return nums[i]
            
        return nums[-1]
