# https://leetcode.com/problems/single-number-ii/

# Solution - Bit Manipulation
# O(n) / O(1)
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        loner = 0

        for shift in range(32):
            bit_sum = 0

            for num in nums:
                bit_sum += (num >> shift) & 1

            loner_bit = bit_sum % 3
            loner = loner | (loner_bit << shift)

        if loner >= (1 << 31):      # if loner >= 2**31
            loner = loner - (1 << 32)   # loner = loner - 2**32

        return loner



### Easy Solution - Not for this problem
# Solution 1 - Hashmap
# O(n) / O(n)
from collections import Counter

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        num_count = Counter(nums)

        for num, count in num_count.items():
            if count == 1:
                return num
            
            

# Solution 2 - Sort
# O(n log n) / O(n)
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        nums.sort()

        for i in range(0, len(nums) - 1, 3):
            if nums[i] == nums[i + 1]:
                continue
            else:
                return nums[i]
        
        return nums[-1]
    
    
    
    
# Solution 3 - Mathematics
# O(n) / O(n)
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        return (3 * sum(set(nums)) - sum(nums)) // 2
