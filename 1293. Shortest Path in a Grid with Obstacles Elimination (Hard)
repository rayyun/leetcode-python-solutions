# https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/

# Solution 1 - BFS
# O(r*c*k) / O(r*c*k)
from collections import deque

class Solution:
    def shortestPath(self, grid: List[List[int]], k: int) -> int:
        R, C = len(grid), len(grid[0])
        queue = deque([(0, 0, k, 0)])
        visited = set([0, 0, k])
        dirs = ((-1, 0), (1, 0), (0, -1), (0, 1))
        
        if R == 1 and C == 1:
            return 0
        
        while queue:
            r, c, k_left, steps = queue.popleft()
            
            for x, y in dirs:
                new_r, new_c = r + x, c + y
                                
                if 0 <= new_r < R and 0 <= new_c < C:
                    if new_r == R - 1 and new_c == C - 1:
                        return steps + 1
                    
                    if grid[new_r][new_c] == 0 and (new_r, new_c, k_left) not in visited:
                        queue.append((new_r, new_c, k_left, steps + 1))
                        visited.add((new_r, new_c, k_left))
                    elif grid[new_r][new_c] == 1 and k_left > 0 and (new_r, new_c, k_left - 1) not in visited:
                        queue.append((new_r, new_c, k_left - 1, steps + 1))
                        visited.add((new_r, new_c, k_left - 1))
                        
        return -1
