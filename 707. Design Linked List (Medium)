# https://leetcode.com/problems/design-linked-list/

# Solution 1 - Singly Linked List
# TC : O(1) for addAtHead
#      O(k) for get, addAtIndex, deleteAtIndex (k: index)
#      O(n) for addAtTail
# SC : O(1)
class MyLinkedList:

    def __init__(self):
        self.size = 0
        self.head = ListNode(0)

    def get(self, index: int) -> int:
        if index >= self.size:
            return -1
        else:
            curr = self.head

            for _ in range(index + 1):
                curr = curr.next                
                
            return curr.val

    def addAtHead(self, val: int) -> None:
        self.addAtIndex(0, val)

    def addAtTail(self, val: int) -> None:
        self.addAtIndex(self.size, val)

    def addAtIndex(self, index: int, val: int) -> None:
        if index > self.size:
            return
        
        prev, curr = self.head, self.head.next  
        self.size += 1
        
        for _ in range(index):
            prev, curr = curr, curr.next

        newNode = ListNode(val, curr)
        prev.next = newNode

    def deleteAtIndex(self, index: int) -> None:
        if index >= self.size:
            return
        
        prev, curr = self.head, self.head.next
        self.size -= 1
        
        for _ in range(index):
            prev, curr = curr, curr.next
        
        prev.next = curr.next           
        
    def showList(self):
        curr = self.head
        
        while curr:
            print(f"{curr.val} --> ", end=" ")
            curr = curr.next



# Solution 2 - Doubly Linked List
# TC : O(1) for addAtHead, addAtTail
#      O(min(k, n-k)) for addAtIndex, deleteAtIndex (k:index)
# SC : O(1)
class ListNode:
    def __init__(self, val=0):
        self.val = val
        self.prev, self.next = None, None
        

class MyLinkedList:

    def __init__(self):
        self.size = 0
        # dummy head, dummy tail
        self.head, self.tail = ListNode(), ListNode()
        self.head.next = self.tail
        self.tail.prev = self.head

    def get(self, index: int) -> int:
        if index >= self.size:
            return -1
        
        if index + 1 < self.size // 2:
            curr = self.head
            
            for _ in range(index + 1):
                curr = curr.next
        else:
            curr = self.tail
            
            for _ in range(self.size - index):
                curr = curr.prev
                
        return curr.val

    def addAtHead(self, val: int) -> None:
        prev, curr = self.head, self.head.next
        
        self.size += 1
        
        newNode = ListNode(val)
        newNode.prev = prev
        newNode.next = curr
        prev.next = newNode
        curr.prev = newNode

    def addAtTail(self, val: int) -> None:
        prev, curr = self.tail.prev, self.tail
        
        self.size += 1
        
        newNode = ListNode(val)
        newNode.prev = prev
        newNode.next = curr
        prev.next = newNode
        curr.prev = newNode

    def addAtIndex(self, index: int, val: int) -> None:
        if index > self.size:
            return
        
        if index < self.size // 2:
            prev = self.head
            
            for _ in range(index):
                prev = prev.next
                
            curr = prev.next
        else:
            curr = self.tail
            
            for _ in range(self.size - index):
                curr = curr.prev
                
            prev = curr.prev
            
        self.size += 1
        newNode = ListNode(val)
        newNode.prev = prev
        newNode.next = curr
        prev.next = newNode
        curr.prev = newNode

    def deleteAtIndex(self, index: int) -> None:
        if index >= self.size:
            return
        
        if index < self.size // 2:
            prev = self.head
            
            for _ in range(index):
                prev = prev.next
                
            curr = prev.next.next
        else:
            curr = self.tail
            
            for _ in range(self.size - index - 1):
                curr = curr.prev
                
            prev = curr.prev.prev
            
        self.size -= 1
        prev.next = curr
        curr.prev = prev
        
    def showList(self):
        curr = self.head
        
        while curr:
            print(f"{curr.val} --> ", end=" ")
            curr = curr.next
