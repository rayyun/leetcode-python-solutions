# https://leetcode.com/problems/closest-binary-search-tree-value/

# Solution 1 - Recursion 
# O(H) / O(n)
class Solution:
    def closestValue(self, root: Optional[TreeNode], target: float) -> int:
        res = float('inf')
        
        def findValue(node):
            nonlocal res
            
            if node:            
                if abs(res - target) > abs(node.val - target):
                    res = node.val

                if node.val > target:
                    findValue(node.left)

                elif node.val < target:
                    findValue(node.right)
        
        findValue(root)
        
        return res
   
   
        
# Solution 2 - Binary Search
# O(H) / O(1)
class Solution:
    def closestValue(self, root: Optional[TreeNode], target: float) -> int:
        closet = root.val
        
        while root:
            closet = min(root.val, closet, key = lambda x: abs(target - x))
            root = root.left if target < root.val else root.right
            
        return closet
