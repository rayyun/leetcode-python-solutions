# https://leetcode.com/problems/next-greater-element-i/

# Solution 1 - Brute Force
# O(n*m) / O(1)
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        res = []

        for num in nums1:
            index = nums2.index(num)

            for i in range(index + 1, len(nums2)):
                if num < nums2[i]:
                    res.append(nums2[i])
                    break
            else:
                res.append(-1)

        return res



# Solution 2 - Better Brute Force
# O(n*m) / O(1)
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        num2_index = {num: idx for idx, num in enumerate(nums2)}
        res = []

        for num in nums1:
            index = num2_index[num]

            for num2 in nums2[index + 1:]:
                if num < num2:
                    res.append(num2)
                    break
            else:
                res.append(-1)
        
        return res



# Solution 3 - Stack
# O(m + n) / O(m)
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        num2_map = dict()
        stack = []

        for num in nums2:
            while stack and stack[-1] < num:
                num2_map[stack.pop()] = num
            
            stack.append(num)
        
        while stack:
            num2_map[stack.pop()] = -1
        
        return [num2_map[num] for num in nums1]



# Solution 4 - Stack (from back)
# O(m + n) / O(m)
class Solution:
    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        num2_map = dict()
        stack = []

        for num in nums2[::-1]:
            while stack and stack[-1] < num:
                stack.pop()
            
            if stack:
                num2_map[num] = stack[-1]
            else:
                num2_map[num] = -1
            
            stack.append(num)

        return [num2_map[num] for num in nums1]
