# https://leetcode.com/problems/maximum-length-of-semi-decreasing-subarrays/description/

# O(n) / O(n)
class Solution:
    def maxSubarrayLength(self, nums: List[int]) -> int:
        longest = 0
        stack = []

        for i in range(len(nums) - 1, -1, -1):
            if not stack or nums[i] < nums[stack[-1]]:
                stack.append(i)

        for i in range(len(nums)):
            while stack and nums[i] > nums[stack[-1]]:
                longest = max(longest, stack.pop() - i + 1)

        return longest
