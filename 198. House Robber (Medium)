# https://leetcode.com/problems/house-robber/

# Solution 1 - DP (1d array)
# O(n) / O(n)
class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums) <= 2:
            return max(nums)
        
        dp = [0 for _ in range(len(nums))]
        dp[0], dp[1] = nums[0], max(nums[0], nums[1])
        
        for i in range(2, len(nums)):
            dp[i] = max(dp[i-1], dp[i-2] + nums[i])
            
        return dp[-1]


# Solution 2 - DP (O(1) space complexity)
# O(n) / O(1)
class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums) <= 2:
            return max(nums)

        rob_2_before, rob_1_before = nums[0], max(nums[0], nums[1])

        for i in range(2, len(nums)):
            current = max(rob_1_before, rob_2_before + nums[i])

            rob_2_before = rob_1_before
            rob_1_before = current

        return rob_1_before



# Solution 3 - Recursion with memoization
# O(n) / O(n)
class Solution:
    def rob(self, nums: List[int]) -> int:
        def rob_from(idx, nums):
            if idx >= len(nums):
                return 0

            if idx in self.visited:
                return self.visited[idx]

            res = max(rob_from(idx + 1, nums), rob_from(idx + 2, nums) + nums[idx])

            self.visited[idx] = res

            return res
        
        self.visited = {}
        return rob_from(0, nums)
