# https://leetcode.com/problems/house-robber/

# Solution 1 - DP (1d array)
# O(n) / O(n)
class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums) <= 2:
            return max(nums)
        
        dp = [0 for _ in range(len(nums))]
        dp[0], dp[1] = nums[0], max(nums[0], nums[1])
        
        for i in range(2, len(nums)):
            dp[i] = max(dp[i-1], dp[i-2] + nums[i])
            
        return dp[-1]


# Solution 2 - DP (O(1) space complexity)
# O(n) / O(1)
class Solution:
    def rob(self, nums: List[int]) -> int:
        if len(nums) <= 2:
            return max(nums)
        
        t1, t2 = nums[0], max(nums[0], nums[1])
        
        for i in range(2, len(nums)):
            t1, t2 = t2, max(t2, t1 + nums[i])
            
        return t2
