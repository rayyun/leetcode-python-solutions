# https://leetcode.com/problems/subarray-sum-equals-k/

# Solution 1 - Prefix Sum array (TLE)
# O(n^2) / O(n)
class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        N = len(nums)
        prefix_sum = [0] * (N + 1)
        prefix_sum[0] = 0
        res = 0

        for i in range(1, N+1):
            prefix_sum[i] = prefix_sum[i-1] + nums[i-1]

        for left in range(N + 1):
            for right in range(left + 1, N + 1):
                if prefix_sum[right] - prefix_sum[left] == k:
                    res += 1
        
        return res



# Solution 2 - Hashmap
# O(n) / O(n)
from collections import defaultdict

class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        prefix_sum_seen = defaultdict(int)
        prefix_sum_seen[0] = 1
        total_sum, res = 0, 0

        for num in nums:
            total_sum += num

            if total_sum - k in prefix_sum_seen:
                res += prefix_sum_seen[total_sum - k]

            prefix_sum_seen[total_sum] += 1

        return res
